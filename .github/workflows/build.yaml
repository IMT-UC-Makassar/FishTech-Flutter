name: Build App

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build: apk
          - os: windows-latest
            build: windows
          - os: macos-latest
            build: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Check Flutter version
        run: flutter --version

      - name: Get dependencies
        run: flutter pub get

      - name: Generate lib/const.dart
        run: echo "const SUPABASE_URL = '${{ secrets.SUPABASE_URL }}'; const ANON_KEY = '${{ secrets.SUPABASE_ANON_KEY }}';" > lib/const.dart

      # Decode firebase_options.dart for Linux/macOS
      - name: Decode firebase_options.dart (Unix)
        if: runner.os != 'Windows'
        run: echo "${{ secrets.FIREBASE_OPTIONS_BASE64 }}" | base64 -d > lib/firebase_options.dart

      # Decode firebase_options.dart for Windows
      - name: Decode firebase_options.dart (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes(
            'lib/firebase_options.dart',
            [System.Convert]::FromBase64String("${{ secrets.FIREBASE_OPTIONS_BASE64 }}")
          )

      # Decode google-services.json (Unix)
      - name: Decode google-services.json (Unix)
        if: runner.os != 'Windows'
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 -d > android/app/google-services.json

      # Decode google-services.json (Windows)
      - name: Decode google-services.json (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes(
            'android/app/google-services.json',
            [System.Convert]::FromBase64String("${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}")
          )

      - name: Check required files
        run: |
          test -f lib/const.dart && echo "const.dart OK"
          test -f lib/firebase_options.dart && echo "firebase_options.dart OK"
          test -f android/app/google-services.json && echo "google-services.json OK"

      - name: Generate splash screen
        run: dart run flutter_native_splash:create

      - name: Generate launcher icons
        run: flutter pub run flutter_launcher_icons

      - name: Build app
        run: flutter build ${{ matrix.build }} --debug
